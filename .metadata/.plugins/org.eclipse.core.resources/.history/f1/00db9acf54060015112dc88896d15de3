package search;

import static org.junit.Assert.assertEquals;

import org.junit.Test;

public class HeapSortTest {
	public void heapSortTest() {
	}
	
	@Test
	public void testNoneElement(){
		int[] actualValue = null, expectedValue = {} ;
		int[] elements = {};
		
		System.out.println("testEmptyArray");
		
		HeapSort target = new HeapSort();
		actualValue = target.sort(elements);
		
		System.out.println("Return ");
		assertEquals(expectedValue.length, actualValue.length);
	}
	
	@Test(expected=NullPointerException.class)
	public void testNullArray(){
		int[] actualValue = {};
		System.out.println("testNullArray");
		
		HeapSort target = new HeapSort();
		actualValue = target.sort(null);
	}
	
	@Test
	public void testOneElement(){
		int[] elements = {1};
		int[] actualValue = null;
		int expectedValue = 1;
		
		System.out.println("testOneElement");
		
		HeapSort target = new HeapSort();
		actualValue = target.sort(elements);
		
		assertEquals(expectedValue, actualValue[0]);
	}
	
	@Test
	public void testOnlyPositiveElements(){
		int[] elements = {1, 10, 2, Integer.MAX_VALUE, 45685};
		int[] actualValue = null;
		int[] expectedValue = {1, 2, 10, 45685, Integer.MAX_VALUE};
		
		System.out.println("testOnlyPositiveElements");
		
		HeapSort target = new HeapSort();
		actualValue = target.sort(elements);
		
		checkSolution(actualValue, expectedValue);
		assertEquals(expectedValue, actualValue[0]);
	}
	
	private boolean checkSolution(int[] actualValue, int[] expectedValue){
		for(int i = 0; i < expectedValue.length; i ++){
			if(actualValue[i] != expectedValue[i]) return false;
		}
		
		return true;
	}
}
